

				    VHDL      "ROM_Pico3.vhd", "aplicacion.vhd", "memoria"

Pin                 DSIN      $00                 ; puerto de entrada
Pout                DSOUT     $01                 ; puerto de salida

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Lineas de código para manejo del LCD:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LCD_E                EQU       1               ; active High Enable      E - bit0
LCD_output_port      DSOUT     64  		  	   ; Se envían datos al LCD
LCD_drive            EQU       8                   ; Master enable (active High) - bit3


; Ejemplo: Para un reloj de 50MHz el valor de la constante es (50-6)/4 = 11  (0B Hex).
; Para rangos de reloj por debajo de  10MHz se debe utilizar el valor 1 y la operación
; resultará más lenta.

delay_1us_constant  EQU       11

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

boton				EQU		  $FF			      ;máscara para recuperar el boton


;Continuación lineas de código para el LCD:

;******************************************************************************
; Tabla ASCII

character_a         EQU       97
character_b         EQU       98
character_c         EQU       99
character_d         EQU       $64
character_e         EQU       $65
character_f         EQU       $66
character_g         EQU       $67
character_h         EQU       $68
character_i         EQU       $69
character_j         EQU       $6A
character_k         EQU       $6B
character_l         EQU       $6C
character_m         EQU       $6D
character_n         EQU       $6E
character_o         EQU       $6F
character_p         EQU       $70
character_q         EQU       $71
character_r         EQU       $72
character_s         EQU       $73
character_t         EQU       $74
character_u         EQU       $75
character_v         EQU       $76
character_w         EQU       $77
character_x         EQU       $78
character_y         EQU       $79
character_z         EQU       $7A
character_Aa        EQU       65
character_Bb        EQU       66
character_Cc        EQU       67
character_Dd        EQU       68
character_Ee        EQU       69
character_Ff        EQU       70
character_Gg        EQU       71
character_Hh        EQU       72
character_Ii        EQU       73
character_Jj        EQU       74
character_Kk        EQU       75
character_Ll        EQU       76
character_Mm        EQU       77
character_Nn        EQU       78
character_Oo        EQU       79
character_Pp        EQU       80
character_Qq        EQU       81
character_Rr        EQU       82
character_Ss        EQU       83
character_Tt        EQU       84
character_Uu        EQU       85
character_Vv        EQU       86
character_Ww        EQU       87
character_Xx        EQU       88
character_Yy        EQU       89
character_Zz        EQU       90

character_0         EQU       48
character_1         EQU       49
character_2         EQU       50
character_3         EQU       51
character_4         EQU       52
character_5         EQU       53
character_6         EQU       54
character_7         EQU       55
character_8         EQU       56
character_9         EQU       57
character_colon     EQU       58
character_stop      EQU       46
character_semi_colon EQU      59
character_minus     EQU       45
character_divide    EQU       47                  ; '/'
character_plus      EQU       43
character_comma     EQU       44
character_less_than EQU       60
character_greater_than EQU    62
character_equals    EQU       61
character_space     EQU       32
character_CR        EQU       13                  ; carriage return
character_question  EQU       63                  ; '?'
character_dollar    EQU       36
character_exclaim   EQU       33                  ; '!'
character_BS        EQU       8                   ; Back Space command character

; ****** Definición registros *************************************************

Lectura EQU sC	; registro transitorio de lectura del dato  desde la entrada     ;esto nose si sirve.

	           ORG       0                   ; SE ALOCA EL CODIGO AL INICIO DEL BLOQUE DE MEMORIA
	           XOR       s6,s6              ; para manipular la entrada y presentar los resultados en el puerto de salida
	           CALL      InicioLCD          ;cuando estoy detendido llamo a esa rutina
               
               EINT                          ; SE HABILITAN LAS INTERRUPCIONE

; **************************************************************************************
; Inicialización
; **************************************************************************************

InicioLCD:      CALL      	LCD_reset           ; Se inicializa el display LCD

Principal:
			XOR 		Lectura, Lectura	; Se limpia el registro
	
			LOAD      	s5, 16              ; Linea 1 posición 0 (cursor)
            CALL      	LCD_cursor		    ; se ubica el cursor
      		CALL      	Mostrar_reposo      ; Se muestra "Reposo"
       	
			EINT						    ; Se habilitan interrupciones	
	
	        JUMP       Inicio
			



;**************************************************************************
; Muestro "Vibra"
;***************************************************************************
Muestrovibra:      CALL      	LCD_reset           ; Se inicializa el display LCD

Principal1:
			XOR 		Lectura, Lectura	; Se limpia el registro
	
			LOAD      	s5, 16              ; Linea 1 posición 0 (cursor)
            CALL      	LCD_cursor		    ; se ubica el cursor
      		CALL      	Mostrar_vibra        ; Se muestra "Vibra"
       	
			EINT						    ; Se habilitan interrupciones	
	
	        JUMP       Inicio


;**************************************************************************
; Muestro "Movimiento"
;***************************************************************************
Muestromovimiento:      CALL      	LCD_reset           ; Se inicializa el display LCD

Principal2:
			XOR 		Lectura, Lectura	; Se limpia el registro
	
			LOAD      	s5, 16              ; Linea 1 posición 0 (cursor)
            CALL      	LCD_cursor		    ; se ubica el cursor
      		CALL      	Mostrar_movimiento  ; Se muestra "Movimiento"
       	
			EINT						    ; Se habilitan interrupciones	
	
	        JUMP       Inicio

;**************************************************************************
; Muestro "Traslado"
;***************************************************************************
Muestrotraslado:      CALL      	LCD_reset           ; Se inicializa el display LCD

Principal3:
			XOR 		Lectura, Lectura	; Se limpia el registro
	
			LOAD      	s5, 16              ; Linea 1 posición 0 (cursor)
            CALL      	LCD_cursor		    ; se ubica el cursor
      		CALL      	Mostrar_traslado    ; Se muestra "Traslado"
       	
			EINT						    ; Se habilitan interrupciones	
	
	        JUMP       Inicio


; **************************************************************************************
; Mensaje a mostrar en el  LCD
; **************************************************************************************
;
; Al iniciar se presenta 'Reposo' en la posición indicada del cursor


Mostrar_reposo:
                    LOAD      s5, character_Rr
                    CALL      LCD_write_data
                    LOAD      s5, character_e
                    CALL      LCD_write_data
                    LOAD      s5, character_p
                    CALL      LCD_write_data
                    LOAD      s5, character_o
                    CALL      LCD_write_data
                    LOAD      s5, character_s
                    CALL      LCD_write_data
                    LOAD      s5, character_o
                    CALL      LCD_write_data
                    RET
; **************************************************************************************
; Rutina que muestra msj "Vibra"
; **************************************************************************************
Mostrar_vibra:
                    LOAD      s5, character_Vv
                    CALL      LCD_write_data
                    LOAD      s5, character_i
                    CALL      LCD_write_data
                    LOAD      s5, character_b
                    CALL      LCD_write_data
                    LOAD      s5, character_r
                    CALL      LCD_write_data
					LOAD      s5, character_a
                    CALL      LCD_write_data
                    RET


; **************************************************************************************
; Rutina que muestra msj "Movimiento"
; **************************************************************************************
Mostrar_movimiento:
                    LOAD      s5, character_Mm
                    CALL      LCD_write_data
                    LOAD      s5, character_o
                    CALL      LCD_write_data
                    LOAD      s5, character_v
                    CALL      LCD_write_data
                    LOAD      s5, character_i
                    CALL      LCD_write_data
					LOAD      s5, character_m
                    CALL      LCD_write_data
                    LOAD      s5, character_i
                    CALL      LCD_write_data
					LOAD      s5, character_e
                    CALL      LCD_write_data
                    LOAD      s5, character_n
                    CALL      LCD_write_data
                    LOAD      s5, character_t
                    CALL      LCD_write_data
                    LOAD      s5, character_o
                    CALL      LCD_write_data
                    RET

; **************************************************************************************
; Rutina que muestra msj "Traslado"
; **************************************************************************************
Mostrar_traslado:
                    LOAD      s5, character_Tt
                    CALL      LCD_write_data
                    LOAD      s5, character_r
                    CALL      LCD_write_data
                    LOAD      s5, character_a
                    CALL      LCD_write_data
                    LOAD      s5, character_s
                    CALL      LCD_write_data
                    LOAD      s5, character_l
                    CALL      LCD_write_data
                    LOAD      s5, character_a
                    CALL      LCD_write_data
                    LOAD      s5, character_d
                    CALL      LCD_write_data
                    LOAD      s5, character_o
                    CALL      LCD_write_data

                    RET



; **************************************************************************************
; Rutinas de delay por software
; **************************************************************************************
;
; Retardo de 1us.
;
;  Todas las instrucciones se ejecutan en 2 ciclos de clock por lo que los cálculos son predecibles. El '6' en
; la siguiente ecuación permite 'CALL delay_1us'  en el código de inicio.
;
; delay_1us_constant =  (clock_rate - 6)/4       donde 'clock_rate' está  en MHz
;
; Registro usado s0
;
delay_1us:          LOAD      s0, delay_1us_constant
wait_1us:           SUB       s0, 1
                    JUMP      NZ, wait_1us
                    RET
;
; Retardo de 40us.
;
; Registros usados s0, s1
;
delay_40us:         LOAD      s1, 40              ; 40 x 1us = 40us
wait_40us:          CALL      delay_1us
                    SUB       s1, 1
                    JUMP      NZ, wait_40us
                    RET
;
;
; Retardo de 1ms.
;
; Registros usados s0, s1, s2
;
delay_1ms:          LOAD      s2, 25              ; 25 x 40us = 1ms
wait_1ms:           CALL      delay_40us
                    SUB       s2, 1
                    JUMP      NZ, wait_1ms
                    RET
;
; Retardo de 20ms.
;
; Retardo de 20ms usado en inicialización
;
; Registros usados s0, s1, s2, s3
;
delay_20ms:         LOAD      s3, 20              ; 20 x 1ms = 20ms
wait_20ms:          CALL      delay_1ms
                    SUB       s3, 1
                    JUMP      NZ, wait_20ms
                    RET

; **************************************************************************************
; LCD Character Module Routines
; **************************************************************************************
;
; LCD module is a 16 character by 2 line display but all displays are very similar
; The 4-wire data interface will be used (DB4 to DB7).
;
; The LCD modules are relatively slow and software delay loops are used to slow down
; KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
; a different section (see above in this case).
;
;
; Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
;
; Register s4 should define the current state of the LCD output port.
;
; Registers used s0, s4
;
LCD_pulse_E:        XOR       s4, LCD_E           ; E=1
                    OUT       s4, LCD_output_port
                    CALL      delay_1us
                    XOR       s4, LCD_E           ; E=0
                    OUT       s4, LCD_output_port
                    RET
;
; Write 4-bit instruction to LCD display.
;
; The 4-bit instruction should be provided in the upper 4-bits of register s4.
; Note that this routine does not release the master enable but as it is only
; used during initialisation and as part of the 8-bit instruction write it
; should be acceptable.
;
; Registers used s4
;
LCD_write_inst4:    AND       s4, $F8             ; Enable=1 RS=0 Instruction, RW=0 Write, E=0
                    OUT       s4, LCD_output_port ; set up RS and RW >40ns before enable pulse
                    CALL      LCD_pulse_E
                    RET
;
;
; Write 8-bit instruction to LCD display.
;
; The 8-bit instruction should be provided in register s5.
; Instructions are written using the following sequence
; Upper nibble
; wait >1us
; Lower nibble
; wait >40us
;
; Registers used s0, s1, s4, s5
;
LCD_write_inst8:    LOAD      s4, s5
                    AND       s4, $F0             ; Enable=0 RS=0 Instruction, RW=0 Write, E=0
                    OR        s4, LCD_drive       ; Enable=1
                    CALL      LCD_write_inst4     ; write upper nibble
                    CALL      delay_1us           ; wait >1us
                    LOAD      s4, s5              ; select lower nibble with
                    SL1       s4                  ; Enable=1
                    SL0       s4                  ; RS=0 Instruction
                    SL0       s4                  ; RW=0 Write
                    SL0       s4                  ; E=0
                    CALL      LCD_write_inst4     ; write lower nibble
                    CALL      delay_40us          ; wait >40us
                    LOAD      s4, $F0             ; Enable=0 RS=0 Instruction, RW=0 Write, E=0
                    OUT       s4, LCD_output_port ; Release master enable
                    RET
;
; Write 8-bit data to LCD display.
;
; The 8-bit data should be provided in register s5.
; Data bytes are written using the following sequence
; Upper nibble
; wait >1us
; Lower nibble
; wait >40us
;
; Registers used s0, s1, s4, s5
;
LCD_write_data:     LOAD      s4, s5
                    AND       s4, $F0             ; Enable=0 RS=0 Instruction, RW=0 Write, E=0
                    OR        s4, 12              ; Enable=1 RS=1 Data, RW=0 Write, E=0
                    OUT       s4, LCD_output_port ; set up RS and RW >40ns before enable pulse
                    CALL      LCD_pulse_E         ; write upper nibble
                    CALL      delay_1us           ; wait >1us
                    LOAD      s4, s5              ; select lower nibble with
                    SL1       s4                  ; Enable=1
                    SL1       s4                  ; RS=1 Data
                    SL0       s4                  ; RW=0 Write
                    SL0       s4                  ; E=0
                    OUT       s4, LCD_output_port ; set up RS and RW >40ns before enable pulse
                    CALL      LCD_pulse_E         ; write lower nibble
                    CALL      delay_40us          ; wait >40us
                    LOAD      s4, $F0             ; Enable=0 RS=0 Instruction, RW=0 Write, E=0
                    OUT       s4, LCD_output_port ; Release master enable
                    RET
;

;
; Reset and initialise display to communicate using 4-bit data mode
; Includes routine to clear the display.
;
; Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
; following by the 8-bit instructions to set up the display.
;
; 28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
; 06 = '000001' Entry mode, '1' increment, '0' no display shift
; 0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
; 01 = '00000001' Display clear
;
; Registers used s0, s1, s2, s3, s4
;
LCD_reset:          CALL      delay_20ms          ; wait more that 15ms for display to be ready
                    LOAD      s4, 48
                    CALL      LCD_write_inst4     ; send '3'
                    CALL      delay_20ms          ; wait >4.1ms
                    CALL      LCD_write_inst4     ; send '3'
                    CALL      delay_1ms           ; wait >100us
                    CALL      LCD_write_inst4     ; send '3'
                    CALL      delay_40us          ; wait >40us
                    LOAD      s4, 32
                    CALL      LCD_write_inst4     ; send '2'
                    CALL      delay_40us          ; wait >40us
                    LOAD      s5, 40              ; Function set
                    CALL      LCD_write_inst8
                    LOAD      s5, 6               ; Entry mode
                    CALL      LCD_write_inst8
                    LOAD      s5, 12              ; Display control
                    CALL      LCD_write_inst8
LCD_clear:          LOAD      s5, 1               ; Display clear
                    CALL      LCD_write_inst8
                    CALL      delay_1ms           ; wait >1.64ms for display to clear
                    CALL      delay_1ms
                    
                    
                    

; Position the cursor ready for characters to be written.
; The display is formed of 2 lines of 16 characters and each
; position has a corresponding address as indicated below.
;
; Character position
; 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
;
; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
;
; This routine will set the cursor position using the value provided
; in register s5. The upper nibble will define the line and the lower
; nibble the character position on the line.
; Example s5 = 2B will position the cursor on line 2 position 11
;
; Registers used s0, s1, s2, s3, s4
;
LCD_cursor:         TEST      s5, 16              ; test for line 1
                    JUMP      Z, set_line2
                    AND       s5, 15              ; make address in range 80 to 8F for line 1
                    OR        s5, $80
                    CALL      LCD_write_inst8     ; instruction write to set cursor
                    RET
set_line2:          AND       s5, 15              ; make address in range C0 to CF for line 2
                    OR        s5, $C0
                    CALL      LCD_write_inst8     ; instruction write to set cursor
                    RET
;
					;ORG       $3FF                ; EL VECTOR DE INTERUPCIONES EN LA ULTIMA DIRECCION
  					;JUMP      INTERRUPCIONES      ; a la rutina de servicio


;*********************************************************************		
;Comienzo del codigo del problema TPNº2				
;*********************************************************************	
                	
                    
Inicio:                                           ; bucle en espera de interrupciones
	                	
					 																
					JUMP       Inicio
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				
										
INTERRUPCIONES:                                   ; AQUÍ EL CODIGO DE LA RUTINA DE INTERRUPCION	
                    IN        s7, Pin
                    
	                COMP	  s7,boton
	                JUMP	  NZ,boton1
	                
	                COMP	  s7,caracter_a
	                JUMP	  NZ,vibra
	                
	                COMP	  s7,caracter_b
	                JUMP	  NZ,cesa
	                
	                COMP	  s7,caracter_c
	                JUMP	  NZ,movimiento
	                
	                COMP	  s7,caracter_d
	                JUMP	  NZ,cesa
	                
	                COMP	  s7,caracter_e
	                JUMP	  NZ,traslado
	                
	                COMP	  s7,caracter_c
	                JUMP	  NZ,cesa
;;;;;;;;;;;;;;;;	
boton1:
	   				COMP	  s6,01
	   				JUMP	  NZ,cero
					LOAD      s6,01
					CALL      Muestrotraslado
	                JUMP	  fin
cero:				
					LOAD	  s6,00
					CALL      Mostrar_reposo
					JUMP	  fin
;;;;;;;;;;;;;;;;	
vibra:				
					COMP	  s6,01
	   				JUMP	  NZ,fin
					CALL      Muestrovibra
					JUMP      fin			
;;;;;;;;;;;;;;;;
movimiento:			
					COMP	  s6,01
	   				JUMP	  NZ,fin	
					CALL      Muestromovimiento
					JUMP      fin	
;;;;;;;;;;;;;;;;					
traslado:			
					COMP	  s6,01
	   				JUMP	  NZ,fin	
					CALL      Muestrotraslado
					JUMP      fin	
;;;;;;;;;;;;;;;;					
cesa:				
					COMP	  s6,01
	   				JUMP	  NZ,fin
					CALL      Mostrar_reposo
					JUMP      fin															
;;;;;;;;;;;;;;;;														
fin:				RETI      ENABLE              ; AL VOLVER DE LA RUTINA DE INT SE HABILITAN DE NUEVO

                    ORG       $3FF                ; EL VECTOR DE INTERUPCIONES EN LA ULTIMA DIRECCION
                    JUMP      INTERRUPCIONES      ; a la rutina de servicio



